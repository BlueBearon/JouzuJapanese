That's a great plan! React.js is a powerful library for building user interfaces, and Java is a robust language for backend development. 
Here's a general outline of how you can structure your project:

Frontend: Create a new directory at the root level of your project, let's call it frontend. Inside this directory, you can set up your React.js application. 
You can create a new React.js application using create-react-app command.
Backend: Your existing Maven project will serve as the backend. You can keep your Java code as it is.
Building the project: You will have two separate build processes for your frontend and backend. 
For the frontend, you will use npm (or yarn) to build your React.js application. For the backend, you will use Maven to build your Java application.
Running the project: Again, you will have two separate processes running for your frontend and backend. 
Your React.js application will run on a Node.js server (typically on port 3000), and your Java application will run on a Java server (like Tomcat, Jetty, or similar, typically on port 8080).
Connecting Frontend and Backend: Your React.js application will make HTTP requests (like GET, POST, etc.) to your Java backend. 
These requests will be made to http://localhost:8080/..., where ... is the specific endpoint in your Java application.
Remember, this is a general outline and the specifics might vary based on your exact requirements. 
If you need more specific help, like how to set up the React.js application, how to make HTTP requests from React.js to your Java backend, etc., feel free to ask!